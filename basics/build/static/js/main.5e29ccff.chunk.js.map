{"version":3,"sources":["VirtualScroller.js","index.js"],"names":["Scroller","props","runScroller","scrollTop","target","state","totalHeight","toleranceHeight","bufferedItems","settings","itemHeight","minIndex","index","Math","floor","data","get","topPaddingHeight","max","bottomPaddingHeight","length","setState","amount","tolerance","viewportHeight","maxIndex","startIndex","bufferHeight","initialPosition","setInitialState","viewportElement","React","createRef","this","current","className","ref","onScroll","style","height","map","row","Component","SETTINGS","getData","offset","limit","start","end","min","console","log","i","push","text","rowTemplate","item","key","ReactDOM","render","VirtualScroller","document","querySelector"],"mappings":"4OA0EeA,E,YA9Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,YAAc,YAAgC,IAAnBC,EAAkB,EAA5BC,OAAUD,UAAkB,EACgD,EAAKE,MAAxFC,EADmC,EACnCA,YAAaC,EADsB,EACtBA,gBAAiBC,EADK,EACLA,cADK,IACUC,SAAYC,EADtB,EACsBA,WAAYC,EADlC,EACkCA,SACvEC,EAAQD,EAAWE,KAAKC,OAAOX,EAAYI,GAAmBG,GAC9DK,EAAO,EAAKd,MAAMe,IAAIJ,EAAOJ,GAC7BS,EAAmBJ,KAAKK,KAAKN,EAAQD,GAAYD,EAAY,GAC7DS,EAAsBN,KAAKK,IAAIZ,EAAcW,EAAmBF,EAAKK,OAASV,EAAY,GAEhG,EAAKW,SAAS,CACZJ,mBACAE,sBACAJ,UArBF,EAAKV,MA5Be,SAACI,GAAc,IAC7BC,EAAkED,EAAlEC,WAAYY,EAAsDb,EAAtDa,OAAQC,EAA8Cd,EAA9Cc,UAAWZ,EAAmCF,EAAnCE,SACjCa,EAAiBF,EAASZ,EAC1BJ,GAFoEG,EAAzBgB,SAEjBd,EAAW,GAAKD,EAC1CH,EAAkBgB,EAAYb,EAI9BO,GAPoER,EAAfiB,WAM3BH,EAAYZ,GACND,EAGtC,MAAO,CACLD,WACAe,iBACAlB,cACAC,kBACAoB,aAXmBH,EAAiB,EAAIjB,EAYxCC,cAXoBc,EAAS,EAAIC,EAYjCN,mBACAE,oBAV0Bb,EAAcW,EAWxCW,gBAVsBX,EAAmBV,EAWzCQ,KAAM,IAOOc,CAAgB5B,EAAMQ,UACnC,EAAKqB,gBAAkBC,IAAMC,YAHZ,E,iFAOjBC,KAAKH,gBAAgBI,QAAQ/B,UAAY8B,KAAK5B,MAAMuB,gBAC/CK,KAAK5B,MAAMuB,iBACdK,KAAK/B,YAAY,CAAEE,OAAQ,CAAED,UAAW,O,+BAkBlC,IAAD,EACiE8B,KAAK5B,MAArEmB,EADD,EACCA,eAAgBP,EADjB,EACiBA,iBAAkBE,EADnC,EACmCA,oBAAqBJ,EADxD,EACwDA,KAC/D,OACE,yBACEoB,UAAU,WACVC,IAAKH,KAAKH,gBACVO,SAAUJ,KAAK/B,YACfoC,MAAO,CAAEC,OAAQf,IAEjB,yBAAKc,MAAO,CAAEC,OAAQtB,KAEpBF,EAAKyB,IAAIP,KAAKhC,MAAMwC,KAEtB,yBAAKH,MAAO,CAAEC,OAAQpB,U,GAzCPuB,aCtBjBC,G,MAAW,CACfjC,WAAY,GACZY,OAAQ,GACRC,UAAW,EACXZ,UAAW,KACXc,SAAU,IACVC,WAAY,IAGRkB,EAAU,SAACC,EAAQC,GACvB,IAAM/B,EAAO,GACPgC,EAAQlC,KAAKK,IAAIyB,EAAShC,SAAUkC,GACpCG,EAAMnC,KAAKoC,IAAIJ,EAASC,EAAQ,EAAGH,EAASlB,UAElD,GADAyB,QAAQC,IAAR,mBAAwBN,EAAxB,aAAmCA,EAASC,EAAQ,EAApD,iBAA8DC,EAA9D,aAAwEC,EAAxE,YACID,GAASC,EACX,IAAK,IAAII,EAAIL,EAAOK,GAAKJ,EAAKI,IAC5BrC,EAAKsC,KAAK,CAAEzC,MAAOwC,EAAGE,KAAK,QAAD,OAAUF,KAGxC,OAAOrC,GAGHwC,EAAc,SAAAC,GAAI,OACtB,yBAAKrB,UAAU,OAAOsB,IAAKD,EAAK5C,OAC7B4C,EAAKF,OAQVI,IAASC,OAAO,mBAJK,kBACnB,kBAACC,EAAD,CAAiBzB,UAAU,WAAWnB,IAAK4B,EAASnC,SAAUkC,EAAUF,IAAKc,MAG/D,MAAkBM,SAASC,cAAc,W","file":"static/js/main.5e29ccff.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst setInitialState = (settings) => {\n  const { itemHeight, amount, tolerance, minIndex, maxIndex, startIndex } = settings\n  const viewportHeight = amount * itemHeight\n  const totalHeight = (maxIndex - minIndex + 1) * itemHeight\n  const toleranceHeight = tolerance * itemHeight\n  const bufferHeight = viewportHeight + 2 * toleranceHeight\n  const bufferedItems = amount + 2 * tolerance\n  const itemsAbove = startIndex - tolerance - minIndex\n  const topPaddingHeight = itemsAbove * itemHeight\n  const bottomPaddingHeight = totalHeight - topPaddingHeight\n  const initialPosition = topPaddingHeight + toleranceHeight\n  return {\n    settings,\n    viewportHeight,\n    totalHeight,\n    toleranceHeight,\n    bufferHeight,\n    bufferedItems,\n    topPaddingHeight,\n    bottomPaddingHeight,\n    initialPosition,\n    data: []\n  }\n}\n\nclass Scroller extends Component {\n  constructor(props) {\n    super(props)\n    this.state = setInitialState(props.settings)\n    this.viewportElement = React.createRef()\n  }\n  \n  componentDidMount() {\n    this.viewportElement.current.scrollTop = this.state.initialPosition\n    if (!this.state.initialPosition) {\n      this.runScroller({ target: { scrollTop: 0 } })\n    }\n  }\n\n  runScroller = ({ target: { scrollTop } }) => {\n    const { totalHeight, toleranceHeight, bufferedItems, settings: { itemHeight, minIndex }} = this.state\n    const index = minIndex + Math.floor((scrollTop - toleranceHeight) / itemHeight)\n    const data = this.props.get(index, bufferedItems)\n    const topPaddingHeight = Math.max((index - minIndex) * itemHeight, 0)\n    const bottomPaddingHeight = Math.max(totalHeight - topPaddingHeight - data.length * itemHeight, 0)\n\n    this.setState({\n      topPaddingHeight,\n      bottomPaddingHeight,\n      data\n    })\n  }\n\n  render() {\n    const { viewportHeight, topPaddingHeight, bottomPaddingHeight, data } = this.state\n    return (\n      <div\n        className=\"viewport\"\n        ref={this.viewportElement}\n        onScroll={this.runScroller}\n        style={{ height: viewportHeight }}\n      >\n        <div style={{ height: topPaddingHeight }}></div>\n        {\n          data.map(this.props.row)\n        }\n        <div style={{ height: bottomPaddingHeight }}></div>\n      </div>\n    )\n  }\n}\n\nexport default Scroller\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport VirtualScroller from './VirtualScroller'\nimport './style.css'\n\nconst SETTINGS = {\n  itemHeight: 20,\n  amount: 10,\n  tolerance: 5,\n  minIndex: -9999,\n  maxIndex: 100000,\n  startIndex: 1\n}\n\nconst getData = (offset, limit) => {\n  const data = []\n  const start = Math.max(SETTINGS.minIndex, offset)\n  const end = Math.min(offset + limit - 1, SETTINGS.maxIndex)\n  console.log(`request [${offset}..${offset + limit - 1}] -> [${start}..${end}] items`)\n  if (start <= end) {\n    for (let i = start; i <= end; i++) {\n      data.push({ index: i, text: `item ${i}` })\n    }\n  }\n  return data\n}\n\nconst rowTemplate = item => (\n  <div className=\"item\" key={item.index}>\n    {item.text}\n  </div>\n)\n\nconst AppComponent = () => (\n  <VirtualScroller className=\"viewport\" get={getData} settings={SETTINGS} row={rowTemplate}/>\n)\n\nReactDOM.render(<AppComponent />, document.querySelector('#root'))\n"],"sourceRoot":""}